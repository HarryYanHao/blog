{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{301:function(t,r,a){\"use strict\";a.r(r);var e=a(9),v=Object(e.a)({},function(){var t=this,r=t.$createElement,a=t._self._c||r;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[a(\"h1\",{attrs:{id:\"http-tcp-ip协议的理解\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#http-tcp-ip协议的理解\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" Http TCP/IP协议的理解\")]),t._v(\" \"),a(\"p\"),a(\"div\",{staticClass:\"table-of-contents\"},[a(\"ul\",[a(\"li\",[a(\"a\",{attrs:{href:\"#http协议概述\"}},[t._v(\"http协议概述\")])]),a(\"li\",[a(\"a\",{attrs:{href:\"#http协议的特点\"}},[t._v(\"http协议的特点\")])]),a(\"li\",[a(\"a\",{attrs:{href:\"#http协议与tcp-ip协议的联系\"}},[t._v(\"HTTP协议与TCP/IP协议的联系\")])]),a(\"li\",[a(\"a\",{attrs:{href:\"#请求与响应\"}},[t._v(\"请求与响应\")]),a(\"ul\",[a(\"li\",[a(\"a\",{attrs:{href:\"#url\"}},[t._v(\"url\")])]),a(\"li\",[a(\"a\",{attrs:{href:\"#请求报文\"}},[t._v(\"请求报文\")])]),a(\"li\",[a(\"a\",{attrs:{href:\"#请求方法\"}},[t._v(\"请求方法\")])])])]),a(\"li\",[a(\"a\",{attrs:{href:\"#响应\"}},[t._v(\"响应\")]),a(\"ul\",[a(\"li\",[a(\"a\",{attrs:{href:\"#响应报文\"}},[t._v(\"响应报文\")])]),a(\"li\",[a(\"a\",{attrs:{href:\"#响应状态码\"}},[t._v(\"响应状态码\")])])])]),a(\"li\",[a(\"a\",{attrs:{href:\"#http请求-响应步骤\"}},[t._v(\"HTTP请求/响应步骤\")])])])]),a(\"p\"),t._v(\" \"),a(\"h2\",{attrs:{id:\"http协议概述\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#http协议概述\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" http协议概述\")]),t._v(\" \"),a(\"p\",[t._v(\"http协议是超文本传输协议，是服务器端发送超文本到客户端的协议，是一种应用层协议，是由请求相应构成\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"http协议的特点\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#http协议的特点\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" http协议的特点\")]),t._v(\" \"),a(\"p\",[t._v(\"1.是一个标准的\"),a(\"code\",[t._v(\"客户端/服务器模型\")]),t._v(\"。\"),a(\"br\"),t._v(\"\\n2.\"),a(\"code\",[t._v(\"简单快速\")]),a(\"br\"),t._v(\"\\n客户端向服务器端请求数据时，只需传递方法和请求的网络资源路径，常用的方法有GET POST HEAD等\\n由于http协议简单，使得http服务器应用程序规模较小，数据通信速度快。\"),a(\"br\"),t._v(\"\\n3.\"),a(\"code\",[t._v(\"灵活\")]),a(\"br\"),t._v(\"\\nHTTP允许传递任意类型的数据对象，在请求和响应的头文件里的Content-Type申明了类型，包含但不仅限于以下格式类型，jpeg格式，gif格式，png格式，html格式，纯文本格式，xml格式，json数据格式，二进制流数据（主要用于文件下载）\"),a(\"br\"),t._v(\"\\n4.\"),a(\"code\",[t._v(\"无链接\")]),a(\"br\"),t._v(\"\\n在http/1.0版本默认使用的是短连接即请求报文头属性connection的值是close，一个连接只处理一个请求，当服务器响应请求并得到客户端的应答后断开连接。在http/1.1版本默认的是使用长连接即请求报文头属性connection的值是keep-alive。\"),a(\"br\"),t._v(\"\\n5.\"),a(\"code\",[t._v(\"无状态\")]),a(\"br\"),t._v(\"\\n服务器端对于事物的处理没有记忆状态，本次的请求和上次的请求之间没有联系。缺点是如果服务器处理时需要之前的信息，客户端需要重传，加大了传递的数据量。优点是，如果服务器处理时不需要之前的数据，传递的数据少相应的速度快。解决http协议无状态特性 客户端浏览器端出现了cookie和session的技术\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"http协议与tcp-ip协议的联系\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#http协议与tcp-ip协议的联系\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" HTTP协议与TCP/IP协议的联系\")]),t._v(\" \"),a(\"p\",[t._v(\"HTTP协议是一种应用层上的协议，TCP协议是传输层上的协议，主要解决的是数据包在网络上传输的完整性，使得接收端能接收到发送端所发的所有的数据包，准确性，保证发送端发送的顺序和接收端接收的顺序保持一致。TCP协议是可靠的，面向连接的。IP协议是在网络层上的协议，主要解决的是网络上的路由和寻址问题。\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"请求与响应\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#请求与响应\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 请求与响应\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"url\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#url\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" url\")]),t._v(\" \"),a(\"p\",[t._v(\"url中文全称统一资源定位符 是一种特殊类型的uri（统一资源标识符）用于定位某个网络资源。格式如下\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-url extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"http://[ip]:[port]/[abs_path]\\n\")])])]),a(\"p\",[t._v(\"http:表示通过http协议来定位网络资源。\"),a(\"br\"),t._v(\"\\nhost:表示了网络资源所在的合法的主机地址或主机域名\"),a(\"br\"),t._v(\"\\nport:指服务器开放的端口，默认80\"),a(\"br\"),t._v(\"\\nabs_path:指网络资源在服务器上的绝对路径  默认是web服务器配置的文件的根目录\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"请求报文\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#请求报文\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 请求报文\")]),t._v(\" \"),a(\"p\",[t._v('http请求是由三部分构成 请求行 请求头（报文头） 空行 请求体（报文体）\\n请求行的内容是 请求方法 url地址 协议及其版本号\\n请求头包含若干个属性 格式为\"属性名:属性值\"服务器据此获取客户端的信息'),a(\"br\"),t._v(\"\\n属性举例：\"),a(\"br\"),t._v(\"\\nUser-Agent：浏览器的身份标识字符串\"),a(\"br\"),t._v(\"\\nContent-Type：请求体的MIME类型\"),a(\"br\"),t._v(\"\\nContent-Length：以8进制表示请求体的长度\"),a(\"br\"),t._v(\"\\nConnection：客户端优先使用的连接类型\"),a(\"br\"),t._v(\"\\nDate：发送消息的日期和时间\"),a(\"br\"),t._v(\"\\nHost：服务器的域名和端口\"),a(\"br\"),t._v(\"\\nAccept：可接收的响应类型\"),a(\"br\"),t._v(\"\\nCache-Control：请求响应中是否使用缓存机制\"),a(\"br\"),t._v(\"\\nOrigin：跨域资源的共享请求\"),a(\"br\"),t._v(\"\\nRefer：表示跳转到当前页面只前的页面地址\"),a(\"br\"),t._v(\"\\nCookie：客户端信息\"),a(\"br\"),t._v(\"\\n请求体包含请求的参数信息\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"请求方法\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#请求方法\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 请求方法\")]),t._v(\" \"),a(\"p\",[t._v(\"GET方法：当客户点开连接或者输入地址时使用的是GET方法请求，GET方法请求参数和对应的值附加在URL后面,利用一个?代表URL的结尾以及附带参数的开始,参数用key=value键值对的方式书写,参数和参数之间用&符号隔开.一般GET请求的参数的大小受限,最大不超过1024kb.由于参数明文的显示在了URL上面,因此不太适合传递私密的数据\")]),t._v(\" \"),a(\"p\",[t._v(\"POST方法：将请求的参数封装在了HTTP请求体中，以名称/值出现，可以传输大量数据，用于表单数据提交请求。\")]),t._v(\" \"),a(\"p\",[t._v(\"HEAD方法：HEAD就像GET，但是服务器接收到HEAD请求后只返回header 不返回data，在只需要查看某个页面状态的时候会非常高效，因为省去了内容的传输部分\")]),t._v(\" \"),a(\"p\",[t._v(\"GET和POST的区别：\"),a(\"br\"),t._v(\"\\n从参数上来看 get请求的参数是直接填写在url的后面，post请求是放在报文体中随报文提交\"),a(\"br\"),t._v(\"\\n从长度限制上来看 get请求的长度一般为2M-8M 不同的浏览器规则不同，post请求一般没有长度限制，但是浏览器有规则限制 整体会大于get请求\\n从安全性上来看 get请求参数明文填写在url后面 所以安全性和私密性不如post请求\\n从本质上来讲 get请求和post请求都属于http请求 即使tcp连接 但是由于一些限定在应用层实现中会有一些不同 get产生一个数据包，post产生两个数据包，get的数据包包含header和data一起发给服务器，服务器处理完请求后返回200状态码，post先产生header的数据包，发送给服务器，服务器返回100的返回码表示收到继续操作，post再发送data的数据包。服务器处理完后返回200状态码\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"响应\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#响应\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 响应\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"响应报文\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#响应报文\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 响应报文\")]),t._v(\" \"),a(\"p\",[t._v(\"HTTP响应是由四部分构成 状态行 响应头 空行 响应正文\"),a(\"br\"),t._v(\"\\n状态行由协议既版本号 返回码 状态码描述构成\"),a(\"br\"),t._v('\\n响应头包含若干属性由键值对构成格式为\"属性名:属性值\" 客户端获取需要使用的附加信息\\n响应正文 服务器返回给客户端的文本信息')]),t._v(\" \"),a(\"h3\",{attrs:{id:\"响应状态码\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#响应状态码\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 响应状态码\")]),t._v(\" \"),a(\"p\",[a(\"code\",[t._v(\"1xx\")]),t._v(\" 表示请求已接收，继续处理\"),a(\"br\"),t._v(\" \"),a(\"code\",[t._v(\"2xx\")]),t._v(\" 表示请求已经成功被接受\"),a(\"br\"),t._v(\" \"),a(\"code\",[t._v(\"3xx\")]),t._v(\" 重定向\"),a(\"br\"),t._v(\" \"),a(\"code\",[t._v(\"4xx\")]),t._v(\" 客户端有错误\"),a(\"br\"),t._v(\" \"),a(\"code\",[t._v(\"5xx\")]),t._v(\" 服务器端有错误\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"http请求-响应步骤\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#http请求-响应步骤\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" HTTP请求/响应步骤\")]),t._v(\" \"),a(\"p\",[t._v(\"1.客户端连接到web服务器\"),a(\"br\"),t._v(\"\\n三次握手后，客户端与web服务器建立一个tcp套接字连接\"),a(\"br\"),t._v(\"\\n三次握手：客户端表明要和服务器端连接 服务器端表明可以连接 客户端和服务器端建立连接\"),a(\"br\"),t._v(\"\\n2.发送http请求\"),a(\"br\"),t._v(\"\\n客户端向web服务器发送一个文本的请求报文\"),a(\"br\"),t._v(\"\\n3.服务器接收后解释完成返回http响应\\nweb服务器解析请求，定位请求资源，服务器将资源副本写到tcp套接字中 返回给客户端\\n4.释放tcp连接\"),a(\"br\"),t._v(\"\\n若connection模式为close，则服务器主动关闭tcp连接 释放tcp连接占用的资源 若是keep-alive 在一定时间内客户端与服务器端仍然可以使用这条连接进行请求响应\"),a(\"br\"),t._v(\"\\n四次挥手：客户端表明要和服务器断开连接 服务器端检查传输层是否还有没有传输完成的数据包 当所有数据包传输完成后通知客户端断开连接 客户端让服务器端断开连接后等待2MSL后没有回复客户端断开连接\\n5.客户端浏览器解析html内容\")])])},[],!1,null,null,null);r.default=v.exports}}]);","extractedComments":[]}