{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{193:function(a,t,e){\"use strict\";e.r(t);var r=e(0),n=Object(r.a)({},function(){var a=this,t=a.$createElement,e=a._self._c||t;return e(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":a.$parent.slotKey}},[e(\"h1\",{attrs:{id:\"laravel框架\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#laravel框架\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" laravel框架\")]),a._v(\" \"),e(\"h2\",{attrs:{id:\"依赖注入、控制反转、反射各个概念的理解和使用\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#依赖注入、控制反转、反射各个概念的理解和使用\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 依赖注入、控制反转、反射各个概念的理解和使用\")]),a._v(\" \"),e(\"p\",[e(\"a\",{attrs:{href:\"https://laravelacademy.org/post/9782.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[a._v(\"https://laravelacademy.org/post/9782.html\"),e(\"OutboundLink\")],1),e(\"br\"),a._v(\" \"),e(\"a\",{attrs:{href:\"https://laravelacademy.org/post/9783.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[a._v(\"https://laravelacademy.org/post/9783.html\"),e(\"OutboundLink\")],1)]),a._v(\" \"),e(\"h2\",{attrs:{id:\"简化流程\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#简化流程\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 简化流程\")]),a._v(\" \"),e(\"p\",[a._v(\"index.php单文件入口 bootstrap下app.php实例化Application类 其中Application类继承容器类Container Container类中提供bind make build方法 容器中维护绑定数组，绑定数组由key值和闭包组成。app的绑定动作在构造函数中实例化时候完成，其余绑定动作由服务提供商类继承的服务提供基类的抽象方法register方法进行bind  框架基础会自动make（build）对应的对象，自定义容器内的绑定数组根据业务场景需要调用make（build）方法实例化对象。\")]),a._v(\" \"),e(\"h2\",{attrs:{id:\"概念简述\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#概念简述\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 概念简述\")]),a._v(\" \"),e(\"p\",[a._v(\"bind：绑定数组key和闭包\")]),a._v(\" \"),e(\"p\",[a._v(\"make：根据key 找到对应闭包 并执行该闭包 闭包内有build方法\")]),a._v(\" \"),e(\"p\",[a._v(\"build：实例化，主要运用的方法是反射 根据绑定数组中的类名使用new ReflectionClass反射找到对应的类，由反射类获取构造函数getConstructor，获取构造函数的参数，利用递归实例化参数（创建依赖对象）实例化对象\")]),a._v(\" \"),e(\"p\",[a._v(\"di：依赖注入，不在方法内部使用new 来创建对象，由构造方法，外部方法传入对象，达到代码解耦和开放封闭原则\")]),a._v(\" \"),e(\"p\",[a._v(\"ioc：控制反转，不需要自己修改类中实例化的类，由外部传入实例化后的对象\")]),a._v(\" \"),e(\"p\",[a._v(\"门面：使用静态方式 调用方法 实例化门面的基类 各个子类只返回需要实例化的key值 外部调用时调起基类中__callStatic的魔术方法 __callStatic调用make函数 生成对象后执行方法\")]),a._v(\" \"),e(\"p\",[a._v(\"契约：实际上就是接口 使用interface定义接口方法 implements实现接口\")]),a._v(\" \"),e(\"p\",[a._v(\"中间件：过滤进入web应用的Http请求，实现方法中主要运用的函数是array_reduce和call_user_function ,管道用数组的数据方式实现 根据管道里面的顺序 array_reduce生成对应的闭包 call_user_function调用执行\")]),a._v(\" \"),e(\"h3\",{attrs:{id:\"实践\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#实践\",\"aria-hidden\":\"true\"}},[a._v(\"#\")]),a._v(\" 实践\")]),a._v(\" \"),e(\"p\",[a._v(\"仿造laravel的思想 自写框架\\n\"),e(\"a\",{attrs:{href:\"https://github.com/HarryYanHao/HF\",target:\"_blank\",rel:\"noopener noreferrer\"}},[a._v(\"github\"),e(\"OutboundLink\")],1)])])},[],!1,null,null,null);t.default=n.exports}}]);","extractedComments":[]}